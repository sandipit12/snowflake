use ETL_Orchestrator
go

/*Copy the failed records with processed flag =-2*/
/*
INSERT INTO [Batch].[Backfill]
           ([BatchNo]
           ,[DatabaseName]
           ,[SchemaName]
           ,[TableName]
           ,[TableNameFQN]
           ,[FromId]
           ,[ToId]
           ,[Query]
           ,[DirectoryName]
           ,[FileName]
           ,[TransactionDate]
           ,[TransactionHour]
           ,[RecordCount]
           ,[FileSizeKB]
           ,[CreateDate]
           ,[ProcessedFlag]
           ,[ProcessedDate])

SELECT 
      [BatchNo]
      ,[DatabaseName]
      ,[SchemaName]
      ,[TableName]
      ,[TableNameFQN]
      ,[FromId]
      ,[ToId]
      ,N'SELECT	[Id]
        ,[RequestMetaData]
        ,[ResponseMetaData]
        ,[CorrelationId]
        ,[CreateDate]
        ,CONVERT(VARCHAR(MAX), DECOMPRESS(RequestBody)) AS RequestBodyJson
		,CONVERT(VARCHAR(MAX), DECOMPRESS(ResponseBody)) AS ResponseBodyJson
FROM	[DecisionEngine].[dbo].[RequestContentEntities]
WHERE	Id > @FromId AND Id <= @ToId
	AND Id NOT IN (78879838,78869128,78869147,78869150,78869169,78869263,78869279,78869707,78869727,78870200,78870202,78871001,78871020,78871923,78872076,78865762,78865799,78866138,78866179,78866266,78866296,78866340,79859626,79859939,79437000,79437805,80348539,80348544,80348875,80351271,80351272,80351601,80351783,80700361,80702480,79857033,79862970,79862980,79863539,79863549,79864615,79865217,80341286,80343437,80343445,80338867,80340186,80340914,80341008,80355888,80356405,80358192,80358193,80324453,80324456,80325108,80326075,80727022,80727026,80727201,80692187,80692317,80692430,80694318,80694404,80694504,80694708,80694852,80695212,80695217,80690860,80690866,80715546,80716372,80711358,80711438,80707004,80708501,80709492,80676699,80732681,80735044,80947168,80947312,81402372,80729288,80729297,80729300,80729429,80729964,80730169,80730175,78872271,78872481,78872566,78872573,78872586,78874082,78874086,78874138,78874224,78874251,78874846,78874848,78874854,78884210,78884518,78886380,78886448,79852209,79852213,79853388,79853726,79853743,79865669,79865713,80345033,80346571,80347098,80347276,80347808,80347992,80334097,80335205,80335359,80335360,80336429,80684662,80685024,80685030,80331122,80331244,80331246,80331582,80332324,80333849,80327898,80329711,80695620,80696823,80697817,80698977,80698978,80723445,80717140,80717388,80718301,80719032,80719170,80719427,80719978,80719991,80720461,80687063,80687064,80681119,80681120,80681537,80681576,80681835,80681869,80683814,80683817,80684219,80684398,80677464,80680794,80735686,80735691,80705221,80705237,80705601,80705603,81400865)
;' as [Query]
      ,[DirectoryName]
      ,[FileName]
      ,[TransactionDate]
      ,[TransactionHour]
      ,[RecordCount]
      ,[FileSizeKB]
      ,[CreateDate]
      ,-2
      ,[ProcessedDate]
 FROM [Batch].[Backfill]
 WHERE
	ProcessedFlag=-1;
*/

-- Update the records with the new query
	UPDATE [Batch].[Backfill]
	SET
		Query=	REPLACE( REPLACE(QUERY,'@FromId',fromId),'@ToId', ToId)
	WHERE
		ProcessedFlag=-2;
	;

update Batch.Backfill 
	set Query = REPLACE(Query,'78879838,78869128,78869147,78869150,78869169,78869263,78869279,78869707,78869727,78870200,78870202,78871001,78871020,78871923,78872076,78865762,78865799,78866138,78866179,78866266,78866296,78866340,79859626,79859939,79437000,79437805,80348539,80348544,80348875,80351271,80351272,80351601,80351783,80700361,80702480,79857033,79862970,79862980,79863539,79863549,79864615,79865217,80341286,80343437,80343445,80338867,80340186,80340914,80341008,80355888,80356405,80358192,80358193,80324453,80324456,80325108,80326075,80727022,80727026,80727201,80692187,80692317,80692430,80694318,80694404,80694504,80694708,80694852,80695212,80695217,80690860,80690866,80715546,80716372,80711358,80711438,80707004,80708501,80709492,80676699,80732681,80735044,80947168,80947312,81402372,80729288,80729297,80729300,80729429,80729964,80730169,80730175,78872271,78872481,78872566,78872573,78872586,78874082,78874086,78874138,78874224,78874251,78874846,78874848,78874854,78884210,78884518,78886380,78886448,79852209,79852213,79853388,79853726,79853743,79865669,79865713,80345033,80346571,80347098,80347276,80347808,80347992,80334097,80335205,80335359,80335360,80336429,80684662,80685024,80685030,80331122,80331244,80331246,80331582,80332324,80333849,80327898,80329711,80695620,80696823,80697817,80698977,80698978,80723445,80717140,80717388,80718301,80719032,80719170,80719427,80719978,80719991,80720461,80687063,80687064,80681119,80681120,80681537,80681576,80681835,80681869,80683814,80683817,80684219,80684398,80677464,80680794,80735686,80735691,80705221,80705237,80705601,80705603,81400865','SELECT ID FROM Batch.BadRecords' )
WHERE
	ProcessedFlag=-2;

-- 
SELECT * FROM [Batch].[Backfill] WHERE ProcessedFlag=-2;

SELECT ProcessedFlag, count(*) FROM [Batch].[Backfill] Group BY ProcessedFlag;

-- Set the processed flag of the original failed records to -3 i.e. retried.
UPDATE [Batch].[Backfill] SET ProcessedFlag=-3 where ProcessedFlag=-1;

-- Set the new records to 0 to be re-processed
UPDATE [Batch].[Backfill] SET ProcessedFlag=0 where ProcessedFlag=-2;